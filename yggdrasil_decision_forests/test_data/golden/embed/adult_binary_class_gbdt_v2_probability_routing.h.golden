#ifndef YDF_MODEL_MY_MODEL_H_
#define YDF_MODEL_MY_MODEL_H_

#include <stdint.h>
#include <array>
#include <algorithm>
#include <cmath>
#include <bitset>
#include <cassert>

namespace my_model {

constexpr const int kNumFeatures = 14;
constexpr const int kNumTrees = 3;

struct Instance {
  int32_t age;
  uint32_t workclass;
  int32_t fnlwgt;
  uint32_t education;
  int32_t education_num;
  uint32_t marital_status;
  uint32_t occupation;
  uint32_t relationship;
  uint32_t race;
  uint32_t sex;
  int32_t capital_gain;
  int32_t capital_loss;
  int32_t hours_per_week;
  uint32_t native_country;
};

struct Label {
  enum {
    kLt50K = 0,
    kGt50K = 1,
  };
};

struct FeatureWorkclass {
  enum {
    kOutOfVocabulary = 0,
    kPrivate = 1,
    kSelfEmpNotInc = 2,
    kLocalGov = 3,
    kStateGov = 4,
    kSelfEmpInc = 5,
    kFederalGov = 6,
    kWithoutPay = 7,
  };
};

struct FeatureEducation {
  enum {
    kOutOfVocabulary = 0,
    kHsGrad = 1,
    kSomeCollege = 2,
    kBachelors = 3,
    kMasters = 4,
    kAssocVoc = 5,
    k11th = 6,
    kAssocAcdm = 7,
    k10th = 8,
    k7th8th = 9,
    kProfSchool = 10,
    k9th = 11,
    k12th = 12,
    kDoctorate = 13,
    k5th6th = 14,
    k1st4th = 15,
    kPreschool = 16,
  };
};

struct FeatureMaritalStatus {
  enum {
    kOutOfVocabulary = 0,
    kMarriedCivSpouse = 1,
    kNeverMarried = 2,
    kDivorced = 3,
    kWidowed = 4,
    kSeparated = 5,
    kMarriedSpouseAbsent = 6,
    kMarriedAfSpouse = 7,
  };
};

struct FeatureOccupation {
  enum {
    kOutOfVocabulary = 0,
    kProfSpecialty = 1,
    kExecManagerial = 2,
    kCraftRepair = 3,
    kAdmClerical = 4,
    kSales = 5,
    kOtherService = 6,
    kMachineOpInspct = 7,
    kTransportMoving = 8,
    kHandlersCleaners = 9,
    kFarmingFishing = 10,
    kTechSupport = 11,
    kProtectiveServ = 12,
    kPrivHouseServ = 13,
  };
};

struct FeatureRelationship {
  enum {
    kOutOfVocabulary = 0,
    kHusband = 1,
    kNotInFamily = 2,
    kOwnChild = 3,
    kUnmarried = 4,
    kWife = 5,
    kOtherRelative = 6,
  };
};

struct FeatureRace {
  enum {
    kOutOfVocabulary = 0,
    kWhite = 1,
    kBlack = 2,
    kAsianPacIslander = 3,
    kAmerIndianEskimo = 4,
    kOther = 5,
  };
};

struct FeatureSex {
  enum {
    kOutOfVocabulary = 0,
    kMale = 1,
    kFemale = 2,
  };
};

struct FeatureNativeCountry {
  enum {
    kOutOfVocabulary = 0,
    kUnitedStates = 1,
    kMexico = 2,
    kPhilippines = 3,
    kGermany = 4,
    kCanada = 5,
    kPuertoRico = 6,
    kIndia = 7,
    kElSalvador = 8,
    kCuba = 9,
    kEngland = 10,
    kJamaica = 11,
    kDominicanRepublic = 12,
    kSouth = 13,
    kChina = 14,
    kItaly = 15,
    kColumbia = 16,
    kGuatemala = 17,
    kJapan = 18,
    kVietnam = 19,
    kTaiwan = 20,
    kIran = 21,
    kPoland = 22,
    kHaiti = 23,
    kNicaragua = 24,
    kGreece = 25,
    kPortugal = 26,
    kEcuador = 27,
    kFrance = 28,
    kPeru = 29,
    kThailand = 30,
    kCambodia = 31,
    kIreland = 32,
    kLaos = 33,
    kYugoslavia = 34,
    kTrinadadTobago = 35,
    kHonduras = 36,
    kHong = 37,
    kHungary = 38,
    kScotland = 39,
    kOutlyingUsGuamUsviEtc = 40,
  };
};

struct __attribute__((packed)) Node {
  uint8_t pos = 0;
  union {
    struct {
      uint8_t feature;
      union {
        int32_t threshold;
        uint16_t categorical;
      };
    } cond;
    struct {
      float value;
    } leaf;
  };
};

static const uint8_t condition_types[] = {0,1,0,1,0,1,1,1,1,1,0,0,0,1};


static const uint8_t root_deltas[] = {55,57,57};

static const Node nodes[] = {
{.pos=25,.cond={.feature=7,.categorical=17}},
{.pos=15,.cond={.feature=10,.threshold=7074}},
{.pos=7,.cond={.feature=4,.threshold=13}},
{.pos=3,.cond={.feature=11,.threshold=2219}},
{.pos=1,.cond={.feature=12,.threshold=41}},
{.leaf={.value=-0.123347}},
{.leaf={.value=-0.0927111}},
{.pos=1,.cond={.feature=2,.threshold=125451}},
{.leaf={.value=0.292776}},
{.leaf={.value=-0.0328167}},
{.pos=3,.cond={.feature=0,.threshold=32}},
{.pos=1,.cond={.feature=11,.threshold=1977}},
{.leaf={.value=-0.106976}},
{.leaf={.value=0.19949}},
{.pos=1,.cond={.feature=4,.threshold=15}},
{.leaf={.value=-0.0295298}},
{.leaf={.value=0.16421}},
{.pos=1,.cond={.feature=0,.threshold=22}},
{.leaf={.value=0.0892425}},
{.pos=3,.cond={.feature=10,.threshold=7566}},
{.pos=1,.cond={.feature=3,.categorical=0}},
{.leaf={.value=-0.0210046}},
{.leaf={.value=0.419984}},
{.pos=1,.cond={.feature=10,.threshold=30962}},
{.leaf={.value=0.419984}},
{.leaf={.value=0.392422}},
{.pos=15,.cond={.feature=3,.categorical=52}},
{.pos=7,.cond={.feature=10,.threshold=5096}},
{.pos=3,.cond={.feature=6,.categorical=24}},
{.pos=1,.cond={.feature=4,.threshold=9}},
{.leaf={.value=-0.0813718}},
{.leaf={.value=0.00969668}},
{.pos=1,.cond={.feature=0,.threshold=34}},
{.leaf={.value=0.00826457}},
{.leaf={.value=0.132992}},
{.pos=3,.cond={.feature=0,.threshold=61}},
{.pos=1,.cond={.feature=2,.threshold=36213}},
{.leaf={.value=0.419984}},
{.leaf={.value=0.419984}},
{.pos=1,.cond={.feature=6,.categorical=38}},
{.leaf={.value=0.205614}},
{.leaf={.value=0.397934}},
{.pos=7,.cond={.feature=10,.threshold=5096}},
{.pos=3,.cond={.feature=11,.threshold=1783}},
{.pos=1,.cond={.feature=6,.categorical=69}},
{.leaf={.value=0.11557}},
{.leaf={.value=0.253437}},
{.pos=1,.cond={.feature=11,.threshold=1990}},
{.leaf={.value=0.417359}},
{.leaf={.value=0.349312}},
{.pos=1,.cond={.feature=6,.categorical=83}},
{.leaf={.value=0.309737}},
{.pos=1,.cond={.feature=0,.threshold=80}},
{.leaf={.value=0.418684}},
{.leaf={.value=0.309737}},
{.pos=25,.cond={.feature=7,.categorical=114}},
{.pos=15,.cond={.feature=10,.threshold=7074}},
{.pos=7,.cond={.feature=3,.categorical=97}},
{.pos=3,.cond={.feature=11,.threshold=2219}},
{.pos=1,.cond={.feature=12,.threshold=41}},
{.leaf={.value=-0.11917}},
{.leaf={.value=-0.0879641}},
{.pos=1,.cond={.feature=2,.threshold=125451}},
{.leaf={.value=0.227849}},
{.leaf={.value=-0.0300817}},
{.pos=3,.cond={.feature=0,.threshold=32}},
{.pos=1,.cond={.feature=12,.threshold=45}},
{.leaf={.value=-0.114477}},
{.leaf={.value=-0.0633502}},
{.pos=1,.cond={.feature=4,.threshold=15}},
{.leaf={.value=-0.0270186}},
{.leaf={.value=0.13565}},
{.pos=1,.cond={.feature=0,.threshold=22}},
{.leaf={.value=0.0765646}},
{.pos=3,.cond={.feature=10,.threshold=7566}},
{.pos=1,.cond={.feature=4,.threshold=11}},
{.leaf={.value=-0.0191264}},
{.leaf={.value=0.310248}},
{.pos=1,.cond={.feature=10,.threshold=30962}},
{.leaf={.value=0.310248}},
{.leaf={.value=0.293003}},
{.pos=15,.cond={.feature=3,.categorical=149}},
{.pos=7,.cond={.feature=10,.threshold=5096}},
{.pos=3,.cond={.feature=6,.categorical=121}},
{.pos=1,.cond={.feature=11,.threshold=1794}},
{.leaf={.value=-0.0159635}},
{.leaf={.value=0.192961}},
{.pos=1,.cond={.feature=11,.threshold=1783}},
{.leaf={.value=0.0773945}},
{.leaf={.value=0.291468}},
{.pos=3,.cond={.feature=0,.threshold=61}},
{.pos=1,.cond={.feature=2,.threshold=45794}},
{.leaf={.value=0.310248}},
{.leaf={.value=0.310248}},
{.pos=1,.cond={.feature=6,.categorical=135}},
{.leaf={.value=0.166497}},
{.leaf={.value=0.296477}},
{.pos=7,.cond={.feature=10,.threshold=5096}},
{.pos=3,.cond={.feature=6,.categorical=207}},
{.pos=1,.cond={.feature=13,.categorical=166}},
{.leaf={.value=0.0771326}},
{.leaf={.value=0.38506}},
{.pos=1,.cond={.feature=11,.threshold=1783}},
{.leaf={.value=0.198242}},
{.leaf={.value=0.303271}},
{.pos=3,.cond={.feature=0,.threshold=63}},
{.pos=1,.cond={.feature=6,.categorical=221}},
{.leaf={.value=0.310521}},
{.leaf={.value=0.318377}},
{.pos=1,.cond={.feature=1,.categorical=235}},
{.leaf={.value=0.222857}},
{.leaf={.value=0.300409}},
{.pos=25,.cond={.feature=7,.categorical=282}},
{.pos=15,.cond={.feature=10,.threshold=7074}},
{.pos=7,.cond={.feature=6,.categorical=243}},
{.pos=3,.cond={.feature=12,.threshold=41}},
{.pos=1,.cond={.feature=10,.threshold=4669}},
{.leaf={.value=-0.116423}},
{.leaf={.value=-0.0101649}},
{.pos=1,.cond={.feature=4,.threshold=14}},
{.leaf={.value=-0.081978}},
{.leaf={.value=0.101877}},
{.pos=3,.cond={.feature=0,.threshold=33}},
{.pos=1,.cond={.feature=12,.threshold=45}},
{.leaf={.value=-0.110506}},
{.leaf={.value=-0.0519256}},
{.pos=1,.cond={.feature=3,.categorical=257}},
{.leaf={.value=-0.0303353}},
{.leaf={.value=0.123551}},
{.pos=1,.cond={.feature=0,.threshold=22}},
{.leaf={.value=0.0663047}},
{.pos=3,.cond={.feature=10,.threshold=7566}},
{.pos=1,.cond={.feature=4,.threshold=11}},
{.leaf={.value=-0.0174006}},
{.leaf={.value=0.254167}},
{.pos=1,.cond={.feature=1,.categorical=274}},
{.leaf={.value=0.238989}},
{.leaf={.value=0.254692}},
{.pos=15,.cond={.feature=4,.threshold=13}},
{.pos=7,.cond={.feature=10,.threshold=5096}},
{.pos=3,.cond={.feature=6,.categorical=289}},
{.pos=1,.cond={.feature=11,.threshold=1794}},
{.leaf={.value=-0.048394}},
{.leaf={.value=0.162805}},
{.pos=1,.cond={.feature=0,.threshold=36}},
{.leaf={.value=-0.00694594}},
{.leaf={.value=0.078723}},
{.pos=3,.cond={.feature=0,.threshold=61}},
{.pos=1,.cond={.feature=2,.threshold=95258}},
{.leaf={.value=0.254167}},
{.leaf={.value=0.254167}},
{.pos=1,.cond={.feature=6,.categorical=303}},
{.leaf={.value=0.139375}},
{.leaf={.value=0.242895}},
{.pos=7,.cond={.feature=10,.threshold=5096}},
{.pos=3,.cond={.feature=6,.categorical=317}},
{.pos=1,.cond={.feature=0,.threshold=68}},
{.leaf={.value=0.0869682}},
{.leaf={.value=-0.0922758}},
{.pos=1,.cond={.feature=11,.threshold=1783}},
{.leaf={.value=0.164478}},
{.leaf={.value=0.248387}},
{.pos=3,.cond={.feature=6,.categorical=331}},
{.pos=1,.cond={.feature=2,.threshold=197569}},
{.leaf={.value=0.260133}},
{.leaf={.value=0.168122}},
{.pos=1,.cond={.feature=0,.threshold=76}},
{.leaf={.value=0.254644}},
{.leaf={.value=0.186707}},
};

  static const std::bitset<345> categorical_bank {"011011111111100110000011011000001110110110011001001111100100011011110110001001010000000001000000000110001110110101000000000001100000110110000000000100000001110000010000000000100000001001000001100000001110110110011000001101100100011000100100000110010110111111111101100000100110000100100000110000000111011011001100000110110010001100000010000111000"};
  
inline float Predict(const Instance& instance) {
  float accumulator {-1.1631};

  const Node* root = nodes;
  const Node* node;
  const auto* raw_numerical = reinterpret_cast<const int32_t*>(&instance);
  (void) raw_numerical;
  const auto* raw_categorical = reinterpret_cast<const uint32_t*>(&instance);
  (void) raw_categorical;
  uint8_t eval;
  for (uint8_t tree_idx = 0; tree_idx != kNumTrees; tree_idx++) {
    node = root;
    while(node->pos) {
      if (condition_types[node->cond.feature] == 0) {
        eval = raw_numerical[node->cond.feature] >= node->cond.threshold;
      } else if (condition_types[node->cond.feature] == 1) {
        eval = categorical_bank[raw_categorical[node->cond.feature] + node->cond.categorical];
      } else {
        assert(false);
      }
      node += (node->pos & -eval) + 1;
    }
    accumulator += node->leaf.value;
    root += root_deltas[tree_idx];
  }

  // Sigmoid
  return 1.f / (1.f + std::exp(-accumulator));
}

}  // namespace my_model
#endif
