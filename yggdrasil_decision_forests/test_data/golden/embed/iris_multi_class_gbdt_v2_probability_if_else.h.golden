#ifndef YDF_MODEL_MY_MODEL_H_
#define YDF_MODEL_MY_MODEL_H_

#include <stdint.h>
#include <array>
#include <algorithm>
#include <bitset>
#include <cassert>

namespace my_model {

constexpr const int kNumFeatures = 4;
constexpr const int kNumTrees = 3;

struct Instance {
  float sepal_length;
  float sepal_width;
  float petal_length;
  float petal_width;
};

struct Label {
  enum {
    kSetosa = 0,
    kVersicolor = 1,
    kVirginica = 2,
  };
};

inline uint8_t Predict(const Instance& instance) {
  std::array<float, 3> accumulator {0, 0, 0};
  // Tree #0
  if (instance.petal_width >= 0.8) {
    if (instance.petal_length >= 3.65) {
      accumulator[0] += -0.15;
    } else {
      accumulator[0] += -0.15;
    }
  } else {
    accumulator[0] += 0.3;
  }

  // Tree #1
  if (instance.petal_width >= 0.8) {
    if (instance.petal_width >= 1.75) {
      if (instance.petal_length >= 4.95) {
        if (instance.sepal_length >= 7.25) {
          accumulator[1] += -0.15;
        } else {
          accumulator[1] += -0.15;
        }
      } else {
        accumulator[1] += -0.06;
      }
    } else {
      if (instance.petal_length >= 4.95) {
        accumulator[1] += 0.03;
      } else {
        if (instance.sepal_length >= 5.3) {
          accumulator[1] += 0.3;
        } else {
          accumulator[1] += 0.21;
        }
      }
    }
  } else {
    if (instance.petal_length >= 1.45) {
      accumulator[1] += -0.15;
    } else {
      accumulator[1] += -0.15;
    }
  }

  // Tree #2
  if (instance.petal_width >= 1.65) {
    if (instance.petal_length >= 5.05) {
      accumulator[2] += 0.3;
    } else {
      accumulator[2] += 0.2;
    }
  } else {
    if (instance.petal_length >= 4.85) {
      accumulator[2] += 0.075;
    } else {
      if (instance.petal_width >= 0.35) {
        accumulator[2] += -0.15;
      } else {
        if (instance.sepal_width >= 3.45) {
          accumulator[2] += -0.15;
        } else {
          accumulator[2] += -0.15;
        }
      }
    }
  }

  return std::distance(accumulator.begin(), std::max_element(accumulator.begin(), accumulator.end()));
}

}  // namespace my_model
#endif
